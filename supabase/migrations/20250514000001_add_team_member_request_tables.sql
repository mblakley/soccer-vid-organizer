-- Drop pending_review column from user_roles
ALTER TABLE public.user_roles 
  DROP COLUMN pending_review;

-- Create team_member_requests table for new team members
CREATE TABLE public.team_member_requests (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  team_id uuid REFERENCES public.teams(id) ON DELETE CASCADE NOT NULL,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  requested_roles text[] NOT NULL,
  status text NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  reviewed_by uuid REFERENCES auth.users(id),
  reviewed_at timestamptz,
  UNIQUE(team_id, user_id)
);

-- Create team_member_role_requests table for role updates
CREATE TABLE public.team_member_role_requests (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  team_member_id UUID REFERENCES public.team_members(id) ON DELETE CASCADE NOT NULL,
  requested_roles text[] NOT NULL,
  status text NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  reviewed_by uuid REFERENCES auth.users(id),
  reviewed_at timestamptz
);

-- Enable RLS
ALTER TABLE public.team_member_requests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.team_member_role_requests ENABLE ROW LEVEL SECURITY;

-- Create policies for team_member_requests
CREATE POLICY "Users can view their own team member requests"
  ON public.team_member_requests
  FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can create team member requests"
  ON public.team_member_requests
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Team coaches can view team member requests"
  ON public.team_member_requests
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM team_members
      WHERE team_id = team_member_requests.team_id
      AND user_id = auth.uid()
      AND 'coach' = ANY(roles)
      AND is_active = true
    )
  );

CREATE POLICY "Team coaches can manage team member requests"
  ON public.team_member_requests
  FOR UPDATE
  USING (
    EXISTS (
      SELECT 1 FROM team_members
      WHERE team_id = team_member_requests.team_id
      AND user_id = auth.uid()
      AND 'coach' = ANY(roles)
      AND is_active = true
    )
  );

-- Create policies for team_member_role_requests
CREATE POLICY "Users can view their own role requests"
  ON public.team_member_role_requests
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM team_members
      WHERE id = team_member_role_requests.team_member_id
      AND user_id = auth.uid()
    )
  );

CREATE POLICY "Users can create role requests"
  ON public.team_member_role_requests
  FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM team_members
      WHERE id = team_member_role_requests.team_member_id
      AND user_id = auth.uid()
    )
  );

CREATE POLICY "Team coaches can view role requests"
  ON public.team_member_role_requests
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM team_members tm
      JOIN team_members tm2 ON tm.team_id = tm2.team_id
      WHERE tm2.id = team_member_role_requests.team_member_id
      AND tm.user_id = auth.uid()
      AND 'coach' = ANY(tm.roles)
      AND tm.is_active = true
    )
  );

CREATE POLICY "Team coaches can manage role requests"
  ON public.team_member_role_requests
  FOR UPDATE
  USING (
    EXISTS (
      SELECT 1 FROM team_members tm
      JOIN team_members tm2 ON tm.team_id = tm2.team_id
      WHERE tm2.id = team_member_role_requests.team_member_id
      AND tm.user_id = auth.uid()
      AND 'coach' = ANY(tm.roles)
      AND tm.is_active = true
    )
  );

-- Create updated_at trigger function if it doesn't exist
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add updated_at triggers
CREATE TRIGGER update_team_member_requests_updated_at
  BEFORE UPDATE ON public.team_member_requests
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_team_member_role_requests_updated_at
  BEFORE UPDATE ON public.team_member_role_requests
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

-- Grant access to authenticated users
GRANT ALL ON public.team_member_requests TO authenticated;
GRANT ALL ON public.team_member_role_requests TO authenticated;

-- Add comments
COMMENT ON TABLE public.team_member_requests IS 'Requests from users to join teams';
COMMENT ON TABLE public.team_member_role_requests IS 'Requests from team members to update their roles';

-- Insert default "pending" team
INSERT INTO teams (id, name, club_affiliation, season, age_group)
VALUES (
  '00000000-0000-0000-0000-000000000000',
  'Pending Team',
  'System',
  '2024',
  'All'
); 