-- Custom types
create type public.app_role as enum ('admin', 'coach', 'player', 'parent');

-- USER ROLES
create table public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references auth.users on delete cascade not null,
  role      app_role not null,
  pending_review boolean not null default true,
  unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';

-- Enable RLS
alter table public.user_roles enable row level security;

-- Create policies
create policy "Users can view their own roles"
  on public.user_roles
  for select
  using (auth.uid() = user_id);

create policy "Users can request new roles"
  on public.user_roles
  for insert
  with check (
    auth.uid() = user_id
    and pending_review = true
  );

create policy "Users can't update roles"
  on public.user_roles
  for update
  using (false);

create policy "Users can't delete roles"
  on public.user_roles
  for delete
  using (false);

-- Grant access to authenticated users
grant usage on schema public to authenticated;
grant all on public.user_roles to authenticated;

-- Create the auth hook function
create or replace function public.jwt_custom_claims(event jsonb)
returns jsonb
language plpgsql
stable
set search_path = 'public'
as $$
  declare
    claims jsonb;
    roles jsonb;
  begin
    -- Fetch all roles for the user as a JSON array
    select jsonb_agg(role) 
    into roles
    from public.user_roles 
    where user_id = (event->>'user_id')::uuid;

    claims := event->'claims';

    -- Set the roles array or null if none
    if roles is not null then
      claims := jsonb_set(claims, '{user_roles}', roles);
    else
      claims := jsonb_set(claims, '{user_roles}', 'null');
    end if;

    -- Update the 'claims' object in the original event
    event := jsonb_set(event, '{claims}', claims);

    return event;
    end;
$$;

grant usage on schema public to supabase_auth_admin;

grant execute
  on function public.jwt_custom_claims
  to supabase_auth_admin;

revoke execute
  on function public.jwt_custom_claims
  from authenticated, anon, public;

grant all
  on table public.user_roles
to supabase_auth_admin;

create policy "Allow auth admin to read user roles" ON public.user_roles
as permissive for select
to supabase_auth_admin
using (true);